/* Текст */

* {
    color: #fff;               /* Цвет текста */
    text-indent: 2px;                   /* Величина красной строки */
    text-align: left, right, center;        /* Выравнивание текста внутри элем. */
    text-decoration: underline, none, inherit;   /* Декоративная линия текста. Много вариантов */
    text-transform: uppercase, lowercase;     /* Написание букв в тексте */
    word-break: normal;              /* Правила переноса слова. Что то было ещё word-wrap. */
    letter-spacing: -1;     /* Расстояние между буквами */
}

/* Шртфты */

* {
    font-family: Arial, Helvetica, sans-serif,serif,monospace,cursive,fantasy;
    font-size: 16px;
    font-weight: bold, normal, lighter;     /* Толшина букв. 100 ~ 900 кратностью 100. */
    font-style: italic;     
    line-height: 2px;       /* Высота линии текста */
}

/* Фон */

* {
    background-color: white;
    background-image: url();
    background-size: contain, cover;
    background-repeat: no-repeat;
    background-position: center;
}

/* Визуализация */

* {
    opacity: .2;          /* Прозраченость элем. */
    visibility: visible;        /* Скрыть элемент, оставляя в потоке */
    box-sizing: border-box;     /* padding и border не увеличит блок, останется его фиксированый размер */
}

/* Для контейнера flex */

* {
    min-height: px;/* правильнее устанавливать так для контейнера, под изменение экрана */
    flex-wrap: nowrap, wrap, wrap-reverse;  /* перенос невмещающихся элем. */
}

* {
    object-fit: cover;  /* подстроит злем (например video, ing), чтобы он закрыл область с парам. height, width */
}

.flex {
    flex-direction: row, row-reverse, column, column-reverse;    /* направления во flex */
    justify-content: flex-start, flex-end, center,
                    space-between, space-around, space-evenly;  /* распределение пустого пространства */
    align-items: stretch, flex-start, flex-end, center, baseline;   /* выравнивание элем. по линии */
    align-content: flex-start, flex-end, center,
                    space-between, space-around, stretch;    /* работает только с flex-wrap: wrap. Где будет перенесённый элем. */
}

/* Для элемента flex */

* {
    order: -1, 1, 2;    /* порядок расположения */
    align-self: stretch; /* теже атрибуты что align-items только лично для элемента */
    flex-basis: 10px; /* базавый размер элемента, пока на него не влияют его соседи */
    flex-grow: 1;   /* описание распредиления пустого пространства 
                    https://medium.com/@stasonmars/%D0%BA%D0%B0%D0%BA-%D1%
                    80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%D0%B5%D1%82-flex-grow-%D0%B2-css-%D0%BF%D0
                    %BE%D0%B4%D1%80%D0%BE%D0%B1%D0%BD%D0%BE%D0%B5-%D1%80%D1%83%D0%BA%D0%BE%D0%B2%
                    D0%BE%D0%B4%D1%81%D1%82%D0%B2%D0%BE-557d406be844 */
    flex-shrink: 1; /* описание https://medium.com/@stasonmars/%D0%BA%D0%B0%D0%BA-%D1
                    %80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%D0%B5%D1%82-flex-shrink-%D0%B
                    2-css-%D0%BF%D0%BE%D0%B4%D1%80%D0%BE%D0%B1%D0%BD%D0%BE%D0
                    %B5-%D1%80%D1%83%D0%BA%D0%BE%D0%B2%D0%BE%D0%B4%D1%81%D1%82%D
                    0%B2%D0%BE-c41e40767194 */
}

/* Списки */

* {
    list-style: none;   /* Скрыть маркеры. Варианты: https://html5book.ru/css-spiski/#list-style-type */

}

/* Псевдоклассы */

a:link {color:blue;}   /* не посещено */
a:visited {color:blue;}    /* посещено */
a:hover {color:blue;}  /* над */
a:active {color:blue;} /* нажат */

.card:nth-of-type(3n) {color:blue;}  /* выбор каждого 3-го элем */
.card:first-of-type {color:blue;}  /* первый этого типа */
.card:last-of-type {color:blue;} /* последний этого типа */

section:has(h2) {color:blue;}    /* элем содержит внутри то что указано в скобках */

a:not(:visited) {color:blue;}    /* то что принимает, должно не выполнятся. Ссылки по которым не переходили */

img[src="logo.png"] {border: 1px;}  /* селект по атрибуту */

.title::before {content: "чтоо";}    /* Добавит (не не будет частью элем) перед <h1 class="title">здесь</h1> */
.title::after {content: "чтото";}    /* Добавит после. Оба всегда содержат свойство content */


/* Позицтонирование */

* {
    position: static;       /* Стандартное поведение */
    /**/
    position: relative;     /* Смещение относотельно себя. Остаётся в потоке */
    top: 20px;
    right: 40px;
    bottom: 10px;
    left: 10px;
    /**/
    position: fixed;        /* Положение относительно угла окна. Не в потоке */
    top: 10px;
    left: 10px;
    /**/
    position: absolute;     /* Не в потоке. не стоит на месте при прокрутке как  fixed. 
                               Если родитель static, то ещеп прородителя с позиционируется от него.
                               Окончательно от body. Если родитель позиционирован (не static) - то
                               относительно его угла. */
    /**/
    position: sticky;       /* Работает со скролом. Гибридное пощиционирование. В потоке и нет. */
    /**/
    z-index: 0;         /* По умолчанию "0". Определяет кто на первый план. Кто больше тот и веден.
                            Для элем со static работает только если у родителя контейнер (flex или grid) */
}