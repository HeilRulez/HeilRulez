/* Префиксы для браузеров */

/* https://autoprefixer.github.io/ru/ */

-webkit-    /* для соответствуюшего движка */
-moz-       /* Firefox */
-o-     /* Opera */
-ms-        /* браузеры MS */

/* Текст */

* {
    color: #fff;               /* Цвет текста */
    text-indent: 2px;                   /* Величина красной строки */
    text-align: left, right, center;        /* Выравнивание текста внутри элем. */
    text-decoration: underline, none, inherit;   /* Декоративная линия текста. Много вариантов */
    text-transform: uppercase, lowercase;     /* Написание букв в тексте */
    word-break: normal;              /* Правила переноса слова. Что то было ещё word-wrap. */
    letter-spacing: -1;     /* Расстояние между буквами */
}

/*___________________________ Шртфты _______________________*/

* {
    font-family: Arial, Helvetica, sans-serif,serif,monospace,cursive,fantasy;      /* Распространённые шрифты или семейства */
    font-size: 16px;
    font-weight: bold, normal, lighter;     /* Толшина букв. 100 ~ 900 кратностью 100. */
    font-style: italic;     
    line-height: 2px;       /* Высота линии текста */
    font-family: inherit;       /* Принудительно унаследовать шрифт от родителя. Для текстового поля */
}

/* Подключение шрифтов */

@font-face {           /* Деректива декларации */
    src: url();     /* Адрес шрифта */
    font-family: "Wat's up";       /* Имя шрифта */
    font-style: italic;        /* Разные начартания задаются новой дикларацией */
    font-weight: bold;
}

/* Форматы шрифтов для современных браузеров woff и woff2 */

@font-face {
    src: url(путь.woff2) format("woff2"), 
        url(.woff) format("woff"), 
        url(.ttf) format("truetype"), 
        url(.eot) format("eot");
    font-family: "Wat's up";
}

/*___________________________ Фон _____________________________*/

* {
    background-color: white;
    background-image: url();

    background-size: contain;       /* Вписывается без обрезания и растягивания. Если мало - бедет повторятся */
    background-size: cover;     /* Растянится на весь  контейнер, то что вылезет - будет отрезано */
    background-size: auto;      /* Подгонит указанную сторону, без растягивания */

    background-repeat: no-repeat;
    background-position: center;

    background: url('example.jpg') no-repeat center / cover;    /* Порядок шортката */
}

/* Визуализация */

* {
    opacity: .2;          /* Прозраченость элем. */
    visibility: visible;        /* Скрыть элемент, оставляя в потоке */
    box-sizing: border-box;     /* padding и border не увеличит блок, останется его фиксированый размер */
}

/* Для контейнера flex */

* {
    display: flex;      /* Ведёт себя блочно */
    display: inline-flex;   /* Ведёт себя строчно */
    min-height: px;/* правильнее устанавливать так для контейнера, под изменение экрана */
    flex-wrap: nowrap, wrap, wrap-reverse;  /* перенос невмещающихся элем. */
    flex-flow: column wrap;     /* [direction flex-wrap] - для сокращённой записи */
}

* {
    object-fit: cover;  /* подстроит злем (например video, ing), чтобы он закрыл область с парам. height, width */
}

* {
    flex-direction: row, row-reverse, column, column-reverse;    /* направления во flex */
    justify-content: flex-start, flex-end, center,
                    space-between, space-around, space-evenly;  /* распределение пустого пространства */
    align-items: stretch, flex-start, flex-end, center, baseline;   /* выравнивание элем. по линии */
    align-content: flex-start, flex-end, center,
                    space-between, space-around, stretch;    /* работает только с flex-wrap: wrap. Где будет перенесённый элем. */
    place-items: start center;      /* объединяет в себе align-items и justify-items  */
    place-content: space-around space-between       /* объединяет в себе align-content и justify-content */
}

/* Для элемента flex */

* {
    order: -1, 1, 2;    /* порядок расположения */
    align-self: stretch; /* теже атрибуты что align-items только лично для элемента */
    flex: 1 1 20px;     /* grow shrink basis - по умолчанию [0 1 auto] */
    flex-basis: 10px; /* базавый размер элемента, пока на него не влияют его соседи */
    flex-grow: 1;   /* описание распредиления пустого пространства 
                    https://medium.com/@stasonmars/%D0%BA%D0%B0%D0%BA-%D1%
                    80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%D0%B5%D1%82-flex-grow-%D0%B2-css-%D0%BF%D0
                    %BE%D0%B4%D1%80%D0%BE%D0%B1%D0%BD%D0%BE%D0%B5-%D1%80%D1%83%D0%BA%D0%BE%D0%B2%
                    D0%BE%D0%B4%D1%81%D1%82%D0%B2%D0%BE-557d406be844 */
    flex-shrink: 1; /* описание https://medium.com/@stasonmars/%D0%BA%D0%B0%D0%BA-%D1
                    %80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%D0%B5%D1%82-flex-shrink-%D0%B
                    2-css-%D0%BF%D0%BE%D0%B4%D1%80%D0%BE%D0%B1%D0%BD%D0%BE%D0
                    %B5-%D1%80%D1%83%D0%BA%D0%BE%D0%B2%D0%BE%D0%B4%D1%81%D1%82%D
                    0%B2%D0%BE-c41e40767194 */
}

/* Списки */

* {
    list-style: none;   /* Скрыть маркеры. Варианты: https://html5book.ru/css-spiski/#list-style-type */

}

/* Псевдоклассы */

a:link {color:blue;}   /* не посещено */
a:visited {color:blue;}    /* посещено */
a:hover {color:blue;}  /* над */
a:active {color:blue;} /* нажат */

.card:nth-of-type(3n) {color:blue;}  /* выбор каждого 3-го элем */
.card:first-of-type {color:blue;}  /* первый этого типа */
.card:last-of-type {color:blue;} /* последний этого типа */

section:has(h2) {color:blue;}    /* элем содержит внутри то что указано в скобках */

a:not(:visited) {color:blue;}    /* то что принимает, должно не выполнятся. Ссылки по которым не переходили */

img[src="logo.png"] {border: 1px;}  /* селект по атрибуту */

.title::before {content: "чтоо";}    /* Добавит (не не будет частью элем) перед <h1 class="title">здесь</h1> */
.title::after {content: "чтото";}    /* Добавит после. Оба всегда содержат свойство content */


:disabled {color: #000;}                        /* выключенный */
:checked {color: #000;}                     /* выбранный */
:focus {                        /* К выбранному текстовому полю, например */
    outline-color: blue;        /* цвет обводки */
}

::placeholder {font-family: Arial;}         /* Для каждого браузера есть свой */
::-ms-input-placeholder {font-family: Arial;}        /* Специально для IE */

/* Позицтонирование */

* {
    position: static;       /* Стандартное поведение */
    /**/
    position: relative;     /* Смещение относотельно себя. Остаётся в потоке */
    top: 20px;
    right: 40px;
    bottom: 10px;
    left: 10px;
    /**/
    position: fixed;        /* Положение относительно угла окна. Не в потоке */
    top: 10px;
    left: 10px;
    /**/
    position: absolute;     /* Не в потоке. не стоит на месте при прокрутке как  fixed. 
                               Если родитель static, то ищет прородителя с позиционируется от него.
                               Окончательно от body. Если родитель позиционирован (не static) - то
                               относительно его угла. */
    /**/
    position: sticky;       /* Работает со скролом. Гибридное пощиционирование. В потоке и нет. 
                                Прилипает к границе родителя до его конца при прокрутке. 
                                Пока блок не достигнет края указанного в свойствах, он ведёт себя как 
                                relative, достигнув указанного размера - как fixe, пока не кончится родитель.*/
    /**/
    z-index: 0;         /* По умолчанию "0". Определяет кто на первый план. Кто больше тот и веден.
                            Для элем со static работает только если у родителя контейнер (flex или grid) */
}


/* ____________________ Трансформации _____________________ */

* {
    transform: matrix(2, 3, 4, 5, 6, 7);
    /*  2 - маштаб Х
        3 - скос по вертикали
        4 - скос по горизонтали
        5 - маштаб по вертикали
        6 - сдвиг по Х
        7 - сдвиг по Y */
    
    transform: translate(10px, 10px);       /* Сдвиги */
    transform: scale(1.5, 0.5);         /* Маштабирование */
    transform: rotate(30deg);        /* Вращение */
    transform: skew(30deg, 40deg);      /* Наклон */
}


/* _____________ Анимация _____________ */

    /* Эта плавность будет работать всегда в обестороны, а
        если определить transition в :hover, то 
        срабатывать будет только при наведении, при 
        отвода курсора не будет. */

* {
    background-color: black;
    transition-property: background-color;      /* Что меняем */
    transition-duration: 1s;                /* Как быстром еняем */
    transition-timing-function: linear;         /* Можно кубиком (https://cubic-bezier.com/),
                                                    можно распространёнными словами (ease, ease-in,
                                                    ease-in-out, ease-out */
    transition-delay: 2s;                   /* Задержка начала */
    /* transition: шорткат в описанном порядке */
}
*:hover {
    background-color: white;
}

/* Тени и градиенты */

* {
    box-shadow: 10px 10px 10px #000;    /* Сдвиг X, сдвиг Y, радиус размытия, цвет */
    text-shadow: 0 0 10px red;

    background-image: linear-gradient(to bottom(или 90deg), white, blue);     /* Направление, цвет, цвет */

    background-image: linear-gradient(#0078FF 0px 100px, #B4DEEF 100px 200px, #FF5A0A 200px 300px);
    background-image: linear-gradient(#0078FF 80%, #C2E3E3 100%);
    /* С указанием точек начала и конца цвета */
}

* {
    background-image: radial-gradient(white, blue);
    background-image: radial-gradient(at 30px, 30px, black, white);
    /* Ключевое at - центер в такой то точке. Без - указания для элипса */

}


/* ____________Переполнение____________ */

* {
    overflow: visible,auto,scroll,hidden;       /* Умолчание, показать скрол, 
                                            всегда показать скрол, обрезать */
    overflow-x: auto;
    overflow-y: auto;
}

/* __________________ Кейфрейм ________________________*/

@keyframes name_of_keyframes {
    0% {
        top: 0;
        left: 0;
    }
    10% {
        top: 10px;
        left: 10px;
    }
    100% {
        top: 20px;
        left: 20px;
    }
}

@keyframes move {       /* Сокращённая декларация, начало и конец */
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}

/* Применение */

* {
    animation: move;        /* Имя указаное в keyframes */
    animation-duration: 2s;     /* Время выполнения */
    /* или */ animation: move 2s;
    /* перечисление разных анимаций для одного элем */
    animation: move 3s, move_2 5s;
    /* При шорткате, задержку писать не раньше днительности. */
}

* {
    animation-timing-function: linear;     /* Можно кубиком (https://cubic-bezier.com/),
                                          можно распространёнными словами (ease, ease-in,
                                            ease-in-out, ease-out */
    animation-delay: 3s;
    animation-iteration-count: 10;      /* Целое число или infinite */
    animation-direction: normal;     /* Задаёт направление: reverse, 
                                    alternate - начало-конец-обраьно, 
                                    alternate-reverse - конец-начало-обратно */
    animation-fill-mode: forwards;  /* forwards - стостояние по окончанию анимации.
                                    backwards - вернёт начальное состояние анимации, 
                                    both  - оба варианта по задержке */
    animation-play-state: running;  /* Запущена ли анимация. paused */
    /* initial - исходное состояние элем на момент загрузки страницы.
        inherit - наследовать состояние от родителя */
}

/* Плавное изменнении и возвращение */

a:hover {
    opacity: .4;
  }
  a {
    transition: opacity .5s ease-in-out;
  }
  
/* Пример */

<html>
    <svg class="svg-animation" version="1.1" xmlns="http://www.w3.org/2000/svg"
        xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 16 16">
        <path d="M16 9.226l-8-6.21-8 6.21v-2.532l8-6.21 8 6.21zM14 9v6h-4v-4h-4v4h-4v-6l6-4.5z"></path>
    </svg>
</html>

.svg-animation {
    animation: color-animation 3s infinite alternate;
    width: 32px;
    height: 32px;
  }
  
  @keyframes color-animation {
    from{
      fill: red;
    }
    to {
      fill: blue;
    }
  }



/*__________________ Функции ___________________*/

* {
width: clamp(200px, 50%, 700px)          /*задаёт значение в диапазоне, как минимальное, предпочтительное и максимальное.*/
}


/*____________________ Grid ________________________*/

.root {
    display: grid;   display: inline-grid;                       /* Указать родителю */

    grid: 1fr / auto-flow dense 2fr;                /* ШОРТКАТ Совмещает row, columns, areas, auto-rows, auto-columns, auto-flow */

    grid-template-columns: 100px 1fr 50%;       /* три колонки */
    grid-template-rows: repeat(3, 3fr) 100px;           /* три одинаковых строки и одна с фиксированным размером */
    grid-template-rows: repeat(3, 3fr 100px);           /* будут чередоваться размеры */
    grid-template-rows: [start-line] 300px [line-two end-line];      /* с заданиями имён линиям. Можно задавать несколько имён одной линии */
    grid-template-areas:                                /* вариант рисования сетка */
    "header header ."
    "main . main"                                       /* точка - пустое пространство. Все клетки должны быть указаны */
    "footer sidebar";
    gap: 20px 10px;                                /* растояние между строк и столбцов. Один параметр - для обоих, можно по раздельности с row-gap  column-gap */

    grid-template: 1rf / 1fr;           /* шорткат row / columns */
    grid-template: 
        [row1-start] "header header header" 25px [row1-end]         /* шорткат с названием линий, схемой areas, размером строк. После / колонки */
        [row2-start] "footer footer footer" 25px [row2-end]
        / auto 50px auto;
    
    grid-auto-columns: 100px;               /* применяеися с grid-auto-flow: column */
    grid-auto-rows: 100px 200px;                /* устанавливает размеры для автомотически добовляемых строк для невлезших элементов. Неяврые треки */
    grid-auto-flow: column;                 /* для добавления неявных столбцов. По умолчанию row */
    grid-auto-flow: dense;              /* позволяет вставать элементам на пустые неразмеченые места в сетке */
    grid-template-columns: 1fr minmax(200px, 1fr);      /* функция с минимальным и максимальным размером колонки*/
    grid-template-columns: 1fr min-content;                     /* колонка будет по размеру наибольшего неделимого и переносить на новые строки что можно */
    grid-template-columns: 1fr max-content;                         /* колонка будет вмещыть содержимое без переноса на новую строку*/
    grid-template-columns: 1fr minmax(min-content, max-content);        /* колонка будет подстраиваться под содержимое */
    grid-template-columns: fit-content(100px);                  /* установит максимальный размер колонки */

    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));  /* будет добавлять колонки что бы заполнить всё пространство. При этом minmax устанавливает границы */
    grid-template-columns: repeat(auto-fit, 100px);         /* будет создавать колонки с размером, но те что без контента слопнутся в нулевой размер */


    justify-items: stretch;             /* | start | end | center;   выравнивает элементы по горизонтали */
    justify-content: stretch;       /* | start | end | center | space-around | space-between | space-evenly   выравнивает всю сетку по горизонтали */
    justify-self: start;                /* личное положение по горизонтали*/
    align-items: stretch;             /* | start | end | center;   выравнивает элементы по вертикали */
    align-content: stretch;       /* | start | end | center | space-around | space-between | space-evenly   выравнивает всю сетку по вертикали */
    align-self: start;                   /* личное положение по вертикали*/

    place-items: start / start;         /* шорткат для align-items / justify-items */
    place-self: end / end;          /* одно значение будет для обоих. Например - center */
}
.header {
    grid-area: header;              /* этот будет размещён по имени при разметке через areas */
    grid-area: 1 / 1 / 2 / 2;       /* шорткат row-start / column-start / row-end / column-end */
}
* {
    grid-column-start: 1;           /* задание линии начала трека */
    grid-column-end: -1;            /* задание линии конца трека */
    grid-row: 1;                    /* сокращённая запись задания линии. Конец по умолчанию станет auto */
    grid-column: 1/3;               /* короткая запись начала и конца линий трека */
    grid-column: start-lline / 2;   /* вариант когда при разметки указывается имя линии */

    grid-row-start: 2;      /* начиная со второй линии */
    grid-row-end: span 2;    /* объеденить две подряд */
    grid-column-start: span 3;
    grid-column-end: 2;
}

/*_______________________ @media ___________________________*/

/* Основной код для разрешения 1024px */
@media screen and (min-width: 2560px) {
    /* стили для больших мониторов с разрешением 4K */
}
@media screen and (min-width: 1440px) {
    /* стили для больших настольных компьютеров и ноутбуков */
}
@media screen and (max-width: 1024px) {
    /* стили для планшета в альбомной ориентации */
}
@media screen and (max-width: 768px) {
    /* стили для планшета */
}
@media screen and (max-width: 425px) {
    /* стили для широкого смартфона */
}
@media screen and (max-width: 375px) {
    /* стили для среднего смартфона */
}
@media screen and (max-width: 320px) {
    /* стили для малого смартфона */
} 
@media all and (max-width: 320px) {
    /* стили для любых типов устройств с максимальной шириной 320 пикселей */
} 

/* Поддердка запросп orientation плохо поддерживается. Для указания альбомной ориентации лучше следущее */
@media screen and (max-width: 568px) and (max-height: 320px) {
    /* landscape ориетнация */
} 

