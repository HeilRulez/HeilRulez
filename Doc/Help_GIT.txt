SSH ДЛЯ GitHub

cd ~        # Переход в домашнюю директорию

SSH-ключи находятся в директории .ssh/

Сгенерируйте в терминале приватный и публичный ключи
 ssh-keygen -t ed25519 -C "praktikum.student@yandex.ru"
или
 ssh-keygen -t rsa -b 4096 -C "praktikum.student@yandex.ru"

 Далее:
    -Укажите место хранения ключей - не указать, сохранит по умолчанию в домашней дериктории или где ты там!?
    -Пароль
    -Повтор пароля
! оставить поле пустым, чтобы никогда не вводить пароль или каждый раз при работе с гитом

Запустите фоном команду ssh-agent. Она ищет SSH-ключ на вашем компьютере:
eval $(ssh-agent -s)

Привяжите приватный ключ к ssh-agent — это файл без расширения .pub
# Выбор команды зависит от алгоритма шифрования
     # для ed25519:
     ssh-add ~/.ssh/id_ed25519
     # для rsa:
     ssh-add ~/.ssh/id_rsa
--------------------------------------
Привязка SSH-ключа к аккаунту GitHub

Содержимое файла id_rsa.pub добавить в настройказ GitHub в SSH ключи


Привязать локальный репозиторий к созданому на хабе.

git remote add origin git@github.com:YandexPracticum/first-project.git    ------ можно привязать без ssh по http

Где origin - это имя репозитория

Остальное, строка из SSH на гите в настройках репозитория

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


/*_________________ Командная строка_______________*/

rmdir -r    - Ключ -r означает рекурсию. Удаляется папка и всё её содержимое.
cd ~        - Переход в домашнюю директорию
cd /        - Переход в корневую директорию
touch       - создать файл
cat         - показать текстовое содержимое файла. 
          ключь -n нумерация строк
          ключь -s показать, удалив повторяющиеся строки

ctrl + a     - в начало строки
ctrl + e     - в конец строки
cp что_копируем что_копируем куда_копируем                                  - Копирование
mv что_перемещаем куда_перемещаем                                           - переместить
mkdir third-project && cd third-project && touch index.html style.css       - Набор команд через &&


vim index.html      - открыть файл в редакторе
i                   - режим редактора
esc                 - что бы выйти в режим команд
:q!                 - выйти без сохранения
:wq                 - выйти с сохранением



\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

git checkout -- "имя файла"       - Отмена изменений. Если было добавлено (git add .), то сначала - git reset (имя файла)
git reset HEAD            - выводит из stage, после команды git add. Сброс до последнего коммита, но не трогает рабочую область.
git reset --hard          - удалением всех изменений и в stage и до него. 
git reser --hard f9f3f3   - вернёт все к этому коммиту, созданные позже коммиты удалятся.
git push --force          - что бы вернуть на github-е, после возврата к коммиту

git branch 'имя новой ветки'       - Создание ветки (или создать и сразу перейти - git checkout -b 'Имя'). 
git checkout 'имя ветки'     - Переход по веткам (посмотреть где я - git branch)
git branch -m 'новое имя'          - Переименовать ветку

git push --set-upstream origin 'имя ветки'        - Добавление ветки на GitHub
git branch -d 'имя ветки'                    - Удаление не выгруженной ветки из VSCode
git branch -D 'имя ветки'                   - Удаление ветки

git checkout [сокращйнный хеш]        - Переход к коммиту

git fetch                     - получает с сервера все изменения, которые у вас еще нет

git status          - покажет не отслеживаемые файлы.
git status -sb      - ключ краткой версии инфы

git log               - История коммитов
git log --online      - сокращённая запись хешей

git diff             - покажет изменения файлов в status modified. До команды git add -A
git diff --staged    - покаже изменения файла находящегося в stage. После git add -A
git diff [сокращйнный хеш] [сокращйнный хеш]      - сравнивание изменений в коммитах

git revert -m 1 [тут хэш]         - оинекс 1 вернёт текуую ветку в состояние до вмеживания в неё (прошлый коммит).
                                    После отмены, смержить эту же версию отменённого не получитья.
                                    Простой способ - создать ветку от этой ветки и в main смержить её.
                                    Больше 0 указывает на основную ветку, которая будет сохранена.

git revert [тут хэш]               - отменяет коммит. Без хэша вроеде последний отменит.

git push -u  first-project master    # Правильно пушить, что бы потом нормально сработал пулл. -u делает привязку ветки.

git commit --amend       - добавить в уже существующий коммит

git stash           - сделает скрытый типа коммит
git stash pop             - вернуться на пооследний такой коммит
git stash save "name"         - сделает скрытый коммит с именем, что бы потом к нему вернуться
git stash list           - покажет список таки коммттов
git stash apply@{n}      - вы возвращаете только нужные изменения. n - указан в списке
git stash clear          - очистит список скрытых коммитов

git merge 'имя ветки'     - залить в текущую ветку, указанную ветку в команде

.gitignor           - файл в репозитории, содержит список файлов и папок которые не будут загружатся в git hab

git clone https://...git -b name-branch      - скопирует и переключится в ветку